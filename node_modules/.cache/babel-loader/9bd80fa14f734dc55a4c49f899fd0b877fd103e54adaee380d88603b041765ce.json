{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MDBBtn, MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBInput, MDBCheckbox, MDBIcon } from 'mdb-react-ui-kit';\nimport { Alert } from 'react-bootstrap';\nimport axios from 'axios';\nfunction App() {\n  _s();\n  // State-urile pentru email, parola și afișarea alertelor pentru email și parolă\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [emailAlert, setEmailAlert] = useState(false);\n  const [passwordAlert, setPasswordAlert] = useState(false);\n  const [authenticated, setAuthenticated] = useState(false);\n\n  // State-ul pentru token\n  const [token, setToken] = useState('');\n\n  // Funcția care se apelează când se schimbă valoarea câmpului email\n  const handleEmailChange = event => {\n    setEmail(event.target.value);\n    setEmailAlert(false); // ascunde alerta dacă se introduce o valoare validă\n  };\n\n  // Funcția care se apelează când se schimbă valoarea câmpului parolă\n  const handlePasswordChange = event => {\n    setPassword(event.target.value);\n    setPasswordAlert(false); // ascunde alerta dacă se introduce o valoare validă\n  };\n\n  // Funcția care se apelează când se trimite formularul\n  const handleFormSubmit = event => {\n    event.preventDefault(); // oprește comportamentul default de trimitere a formularului\n\n    if (email === '') {\n      // dacă email-ul este gol, afișează alerta și oprește execuția\n      setEmailAlert(true);\n      return;\n    }\n    if (password === '') {\n      // dacă parola este goală, afișează alerta și oprește execuția\n      setPasswordAlert(true);\n      return;\n    }\n    axios.post('/api/login', {\n      email,\n      password\n    }) // trimite request-ul de autentificare la API-ul nostru\n    .then(response => {\n      // dacă request-ul a avut succes\n      if (response.data.success) {\n        // dacă autentificarea a fost reușită\n        setToken(response.data.token); // setează token-ul în state\n      } else {\n        alert(response.data.message); // afișează o alertă pentru erorile de autentificare\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (token !== '') {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`; // setează token-ul în header-ul request-urilor\n      window.location.href = '/dashboard'; // redirecționează utilizatorul către pagina de dashboard\n    }\n  }, [token]);\n}\n_s(App, \"gOlFYZndz+hZykieKKuCnmK6v7k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MDBBtn","MDBContainer","MDBRow","MDBCol","MDBCard","MDBCardBody","MDBInput","MDBCheckbox","MDBIcon","Alert","axios","App","_s","email","setEmail","password","setPassword","emailAlert","setEmailAlert","passwordAlert","setPasswordAlert","authenticated","setAuthenticated","token","setToken","handleEmailChange","event","target","value","handlePasswordChange","handleFormSubmit","preventDefault","post","then","response","data","success","alert","message","defaults","headers","common","window","location","href","_c","$RefreshReg$"],"sources":["D:/gym-project/src/Pages/LoginPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBInput,\r\n  MDBCheckbox,\r\n  MDBIcon\r\n} from 'mdb-react-ui-kit';\r\nimport { Alert } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  // State-urile pentru email, parola și afișarea alertelor pentru email și parolă\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [emailAlert, setEmailAlert] = useState(false);\r\n  const [passwordAlert, setPasswordAlert] = useState(false);\r\n  const [authenticated, setAuthenticated] = useState(false);\r\n\r\n  // State-ul pentru token\r\n  const [token, setToken] = useState('');\r\n\r\n  // Funcția care se apelează când se schimbă valoarea câmpului email\r\n  const handleEmailChange = (event) => {\r\n    setEmail(event.target.value);\r\n    setEmailAlert(false); // ascunde alerta dacă se introduce o valoare validă\r\n  }\r\n\r\n  // Funcția care se apelează când se schimbă valoarea câmpului parolă\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n    setPasswordAlert(false); // ascunde alerta dacă se introduce o valoare validă\r\n  }\r\n\r\n  // Funcția care se apelează când se trimite formularul\r\n  const handleFormSubmit = (event) => {\r\n    event.preventDefault(); // oprește comportamentul default de trimitere a formularului\r\n\r\n    if (email === '') { // dacă email-ul este gol, afișează alerta și oprește execuția\r\n      setEmailAlert(true);\r\n      return;\r\n    }\r\n    if (password === '') { // dacă parola este goală, afișează alerta și oprește execuția\r\n      setPasswordAlert(true);\r\n      return;\r\n    }\r\n\r\n    axios.post('/api/login', { email, password }) // trimite request-ul de autentificare la API-ul nostru\r\n      .then((response) => { // dacă request-ul a avut succes\r\n        if (response.data.success) { // dacă autentificarea a fost reușită\r\n          setToken(response.data.token); // setează token-ul în state\r\n        } else {\r\n          alert(response.data.message); // afișează o alertă pentru erorile de autentificare\r\n        }\r\n      });\r\n  }\r\n  useEffect(() => {\r\n    if (token !== '') {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`; // setează token-ul în header-ul request-urilor\r\n      window.location.href = '/dashboard'; // redirecționează utilizatorul către pagina de dashboard\r\n    }\r\n  }, [token]);\r\n}\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,MAAM,EACNC,YAAY,EACZC,MAAM,EACNC,MAAM,EACNC,OAAO,EACPC,WAAW,EACXC,QAAQ,EACRC,WAAW,EACXC,OAAO,QACF,kBAAkB;AACzB,SAASC,KAAK,QAAQ,iBAAiB;AACvC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACuB,aAAa,EAAEC,gBAAgB,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACA,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAM2B,iBAAiB,GAAIC,KAAK,IAAK;IACnCZ,QAAQ,CAACY,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAC5BV,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;EACxB,CAAC;;EAED;EACA,MAAMW,oBAAoB,GAAIH,KAAK,IAAK;IACtCV,WAAW,CAACU,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAC/BR,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;EAC3B,CAAC;;EAED;EACA,MAAMU,gBAAgB,GAAIJ,KAAK,IAAK;IAClCA,KAAK,CAACK,cAAc,EAAE,CAAC,CAAC;;IAExB,IAAIlB,KAAK,KAAK,EAAE,EAAE;MAAE;MAClBK,aAAa,CAAC,IAAI,CAAC;MACnB;IACF;IACA,IAAIH,QAAQ,KAAK,EAAE,EAAE;MAAE;MACrBK,gBAAgB,CAAC,IAAI,CAAC;MACtB;IACF;IAEAV,KAAK,CAACsB,IAAI,CAAC,YAAY,EAAE;MAAEnB,KAAK;MAAEE;IAAS,CAAC,CAAC,CAAC;IAAA,CAC3CkB,IAAI,CAAEC,QAAQ,IAAK;MAAE;MACpB,IAAIA,QAAQ,CAACC,IAAI,CAACC,OAAO,EAAE;QAAE;QAC3BZ,QAAQ,CAACU,QAAQ,CAACC,IAAI,CAACZ,KAAK,CAAC,CAAC,CAAC;MACjC,CAAC,MAAM;QACLc,KAAK,CAACH,QAAQ,CAACC,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC;MAChC;IACF,CAAC,CAAC;EACN,CAAC;;EACDvC,SAAS,CAAC,MAAM;IACd,IAAIwB,KAAK,KAAK,EAAE,EAAE;MAChBb,KAAK,CAAC6B,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAI,UAASlB,KAAM,EAAC,CAAC,CAAC;MACpEmB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,YAAY,CAAC,CAAC;IACvC;EACF,CAAC,EAAE,CAACrB,KAAK,CAAC,CAAC;AACb;AAACX,EAAA,CAnDQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAoDZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}